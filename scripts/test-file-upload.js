#!/usr/bin/env node

/**
 * Test File Upload Operations Script
 *
 * This script tests file upload functionality with Supabase Storage.
 * It tests uploading, retrieving, and deleting medical documents.
 *
 * Run with: node scripts/test-file-upload.js
 */

const { createClient } = require("@supabase/supabase-js");
const fs = require("fs");
const path = require("path");

// Test configuration
const TEST_USER_ID = "test-user-" + Date.now();
const TEST_USER_EMAIL = `test-${Date.now()}@example.com`;
const BUCKET_NAME = "medical-documents";

async function createTestFile() {
  // Create a simple test file
  const testContent = `Test Medical Document
Generated: ${new Date().toISOString()}
Type: Test Document
Content: This is a test medical document for upload testing.

Patient Information:
- Name: Test Patient
- Date: ${new Date().toDateString()}
- Document Type: Test

This file is automatically generated for testing purposes.
`;

  const testFilePath = path.join(__dirname, "test-document.txt");
  fs.writeFileSync(testFilePath, testContent);
  return testFilePath;
}

async function testFileUpload() {
  console.log("üìÅ Testing File Upload Operations...\n");

  // Get Supabase configuration
  const supabaseUrl = "https://ufmfegcyxqadivgebpch.supabase.co/";
  let supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

  // Try to read from app.json if environment variable is not set
  if (!supabaseKey || supabaseKey === "your_supabase_anon_key_here") {
    try {
      const appConfigPath = path.join(__dirname, "..", "app.json");
      const appConfig = JSON.parse(fs.readFileSync(appConfigPath, "utf8"));
      supabaseKey = appConfig.expo?.extra?.supabaseAnonKey;
    } catch (err) {
      // Ignore file read errors
    }
  }

  if (!supabaseKey || supabaseKey === "your_supabase_anon_key_here") {
    console.error("‚ùå Error: Supabase anon key not configured");
    console.log("\nüîß Setup Instructions:");
    console.log(
      "1. Go to your Supabase dashboard: https://supabase.com/dashboard"
    );
    console.log(
      "2. Select your project: https://ufmfegcyxqadivgebpch.supabase.co/"
    );
    console.log("3. Go to Settings > API");
    console.log("4. Copy the 'anon public' key");
    console.log(
      "5. Update app.json extra.supabaseAnonKey with your actual key"
    );
    console.log("   OR set EXPO_PUBLIC_SUPABASE_ANON_KEY environment variable");
    return;
  }

  const supabase = createClient(supabaseUrl, supabaseKey);

  try {
    // Step 1: Set up test user context
    console.log("üìã Step 1: Setting up test user context...");

    // Set user context for RLS
    const { error: contextError } = await supabase.rpc("set_rls_config", {
      setting_name: "app.current_user_id",
      setting_value: TEST_USER_ID,
      is_local: true,
    });

    if (contextError) {
      console.error("‚ùå Failed to set user context:", contextError.message);
      return;
    }

    // Create test user
    const { data: testUser, error: userError } = await supabase
      .from("users")
      .insert({
        clerk_user_id: TEST_USER_ID,
        email: TEST_USER_EMAIL,
        first_name: "Test",
        last_name: "User",
        role: "patient",
      })
      .select()
      .single();

    if (userError) {
      console.error("‚ùå Failed to create test user:", userError.message);
      return;
    }

    console.log(`‚úÖ Created test user: ${testUser.email}`);
    console.log(`   User ID: ${testUser.id}\n`);

    // Step 2: Create test file
    console.log("üìã Step 2: Creating test file...");
    const testFilePath = await createTestFile();
    const fileStats = fs.statSync(testFilePath);
    console.log(
      `‚úÖ Created test file: ${path.basename(testFilePath)} (${
        fileStats.size
      } bytes)\n`
    );

    // Step 3: Test storage bucket existence
    console.log("üìã Step 3: Checking storage bucket...");

    try {
      const { data: buckets, error: bucketsError } =
        await supabase.storage.listBuckets();

      if (bucketsError) {
        console.error("‚ùå Failed to list buckets:", bucketsError.message);
        console.log(
          "üí° You may need to create the 'medical-documents' bucket in Supabase Storage"
        );
        return;
      }

      const medicalBucket = buckets.find(
        (bucket) => bucket.name === BUCKET_NAME
      );
      if (!medicalBucket) {
        console.log(`‚ö†Ô∏è  Bucket '${BUCKET_NAME}' not found. Creating it...`);

        // Try to create the bucket
        const { data: createBucket, error: createError } =
          await supabase.storage.createBucket(BUCKET_NAME, {
            public: false,
            allowedMimeTypes: ["image/*", "application/pdf", "text/*"],
            fileSizeLimit: 10485760, // 10MB
          });

        if (createError) {
          console.error("‚ùå Failed to create bucket:", createError.message);
          console.log(
            "üí° Please manually create the 'medical-documents' bucket in Supabase Storage dashboard"
          );
          return;
        } else {
          console.log(`‚úÖ Created bucket: ${BUCKET_NAME}`);
        }
      } else {
        console.log(`‚úÖ Found bucket: ${BUCKET_NAME}`);
      }
    } catch (error) {
      console.error("‚ùå Storage access error:", error.message);
      console.log(
        "üí° Storage may not be enabled or accessible with current permissions"
      );
      return;
    }

    console.log("");

    // Step 4: Test file upload
    console.log("üìã Step 4: Testing file upload...");

    const fileContent = fs.readFileSync(testFilePath);
    const fileName = `test-documents/${TEST_USER_ID}/test-document-${Date.now()}.txt`;

    const { data: uploadData, error: uploadError } = await supabase.storage
      .from(BUCKET_NAME)
      .upload(fileName, fileContent, {
        contentType: "text/plain",
        upsert: false,
      });

    if (uploadError) {
      console.error("‚ùå Failed to upload file:", uploadError.message);
      return;
    }

    console.log(`‚úÖ Uploaded file: ${fileName}`);
    console.log(`   File path: ${uploadData.path}`);

    // Step 5: Test document metadata creation
    console.log("\nüìã Step 5: Testing document metadata creation...");

    const documentMetadata = {
      user_id: testUser.id,
      title: "Test Medical Document",
      file_path: uploadData.path,
      file_type: "text/plain",
      file_size: fileStats.size,
      document_type: "medical_record",
      upload_date: new Date().toISOString(),
    };

    const { data: documentRecord, error: docError } = await supabase
      .from("medical_documents")
      .insert(documentMetadata)
      .select()
      .single();

    if (docError) {
      console.error("‚ùå Failed to create document record:", docError.message);
    } else {
      console.log(`‚úÖ Created document record: ${documentRecord.title}`);
      console.log(`   Document ID: ${documentRecord.id}`);
    }

    // Step 6: Test file download/retrieval
    console.log("\nüìã Step 6: Testing file download...");

    const { data: downloadData, error: downloadError } = await supabase.storage
      .from(BUCKET_NAME)
      .download(uploadData.path);

    if (downloadError) {
      console.error("‚ùå Failed to download file:", downloadError.message);
    } else {
      const downloadedContent = await downloadData.text();
      console.log(`‚úÖ Downloaded file successfully`);
      console.log(`   File size: ${downloadData.size} bytes`);
      console.log(
        `   Content preview: ${downloadedContent.substring(0, 100)}...`
      );
    }

    // Step 7: Test file URL generation
    console.log("\nüìã Step 7: Testing file URL generation...");

    const { data: urlData } = supabase.storage
      .from(BUCKET_NAME)
      .getPublicUrl(uploadData.path);

    if (urlData?.publicUrl) {
      console.log(`‚úÖ Generated file URL: ${urlData.publicUrl}`);
    } else {
      console.log("‚ÑπÔ∏è  File URLs are private (bucket is not public)");
    }

    // Step 8: Test document listing
    console.log("\nüìã Step 8: Testing document listing...");

    const { data: userDocuments, error: listError } = await supabase
      .from("medical_documents")
      .select("*")
      .eq("user_id", testUser.id)
      .order("created_at", { ascending: false });

    if (listError) {
      console.error("‚ùå Failed to list documents:", listError.message);
    } else {
      console.log(`‚úÖ Retrieved ${userDocuments.length} documents:`);
      userDocuments.forEach((doc, index) => {
        console.log(
          `   ${index + 1}. ${doc.title} (${doc.file_type}, ${
            doc.file_size
          } bytes)`
        );
      });
    }

    // Step 9: Test file deletion
    console.log("\nüìã Step 9: Testing file deletion...");

    // Delete from storage
    const { error: deleteError } = await supabase.storage
      .from(BUCKET_NAME)
      .remove([uploadData.path]);

    if (deleteError) {
      console.error(
        "‚ùå Failed to delete file from storage:",
        deleteError.message
      );
    } else {
      console.log("‚úÖ Deleted file from storage");
    }

    // Delete document record
    if (documentRecord) {
      const { error: deleteDocError } = await supabase
        .from("medical_documents")
        .delete()
        .eq("id", documentRecord.id);

      if (deleteDocError) {
        console.error(
          "‚ùå Failed to delete document record:",
          deleteDocError.message
        );
      } else {
        console.log("‚úÖ Deleted document record");
      }
    }

    // Step 10: Cleanup
    console.log("\nüìã Step 10: Cleaning up test data...");

    // Delete test user
    const { error: cleanupUserError } = await supabase
      .from("users")
      .delete()
      .eq("id", testUser.id);

    if (cleanupUserError) {
      console.log(
        `‚ö†Ô∏è  Warning: Could not clean up test user: ${cleanupUserError.message}`
      );
    } else {
      console.log("‚úÖ Cleaned up test user");
    }

    // Remove local test file
    try {
      fs.unlinkSync(testFilePath);
      console.log("‚úÖ Cleaned up local test file");
    } catch (err) {
      console.log("‚ö†Ô∏è  Warning: Could not clean up local test file");
    }

    console.log("\nüéâ File Upload Testing Complete!");
    console.log("\nüìã Test Summary:");
    console.log("   ‚úÖ STORAGE: Successfully accessed storage bucket");
    console.log("   ‚úÖ UPLOAD: Successfully uploaded file");
    console.log("   ‚úÖ METADATA: Successfully stored document metadata");
    console.log("   ‚úÖ DOWNLOAD: Successfully retrieved file");
    console.log("   ‚úÖ LISTING: Successfully listed user documents");
    console.log("   ‚úÖ DELETE: Successfully removed file and metadata");
    console.log("   ‚úÖ CLEANUP: Test data removed");

    console.log("\nüí° All file upload operations are working correctly!");
    console.log("   Ready for production use with real medical documents.");
  } catch (error) {
    console.error("\n‚ùå Test failed with error:", error.message);
    console.log("\nüîß Troubleshooting tips:");
    console.log("   1. Ensure Supabase Storage is enabled");
    console.log("   2. Create 'medical-documents' bucket in Storage dashboard");
    console.log("   3. Check storage policies allow authenticated users");
    console.log("   4. Verify API key has storage permissions");
    console.log("   5. Check network connectivity to Supabase");
  }
}

// Run the test
testFileUpload();
